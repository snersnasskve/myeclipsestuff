package com.sners.snowforecast.view

import android.app.Activity
import android.content.Intent
import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.animation.AnimationUtils
import android.widget.*
import androidx.databinding.DataBindingUtil
import com.sners.snowforecast.ForecastMainActivity
import com.sners.snowforecast.R
import com.sners.snowforecast.databinding.CurrentlyBinding
import com.sners.snowforecast.databinding.DashboardBinding
import com.sners.snowforecast.weather.WeatherConstants
import com.sners.snowforecast.weather.WeatherIconGallery

/**
 * A class representing the Current weather view
 */
class WeatherCurrent : Activity() {

    /**
     * @property binding The binding class is autogenerated from the name of the layout it refers to
     */
    private lateinit var binding: CurrentlyBinding

    /**
     * @property llCurrently Linear Layout for the Current weather - needed for animations
     */
    private var llCurrently: LinearLayout? = null

    /**
     * @property weatherData Weather data object
     */
    private var weatherData = ForecastMainActivity.weatherData!!

    /**
     * On Create - Override
     * @param savedInstanceState Saved instance state
     */
    override fun onCreate(savedInstanceState: Bundle?) {
        // TODO Auto-generated method stub
        super.onCreate(savedInstanceState)
        binding = DataBindingUtil.setContentView(this, R.layout.currently)
        llCurrently = findViewById<View>(R.id.llCurrently) as LinearLayout

        //Animation animExitLeft = AnimationUtils.makeInAnimation(this, true);
        //llCurrently.startAnimation(animExitLeft);
        binding.tvCurSummary.text = weatherData.headlineSummary
        binding.tvCurPrecipIntensity.text = weatherData.precipitation!!.milsPerHourString
        binding.tvCurMoisture.text = weatherData.getMoistureSummary()
        binding.tvCurTemperature.text = weatherData.getTemperatureSummary()
        binding.tvCurWind.text = weatherData.wind!!.getDetails()
        binding.tvCurUvIndex.text = weatherData.getUvIndex().toString()

        //	timeTillPrecip
        binding.tvCurTimeTilPrecip.text = weatherData.precipitation!!.timeTilString(false)
        binding.tvCurTimeTilSnow.text =
            weatherData.precipitation!!.timeTilPrecipTypeString(WeatherConstants.PRECIP_TYPE_SNOW)
        var alertHeadline: String? = "None"
        if (null != weatherData.alerts) {
            alertHeadline = weatherData.alerts!!.alertSummary
        }
        binding.tvCurAlertString.text = alertHeadline
        val iconName = weatherData.headlineIcon
        val iconId = resources.getIdentifier(iconName, "drawable", packageName)
        binding.ivCurIcon.setImageResource(iconId)
        binding.ivCurIcon.contentDescription = iconName
        setWeatherActivityIcons()
    }

    /**
     * Set up weather activity icons
     */
    private fun setWeatherActivityIcons() {
        val iconGallery = WeatherIconGallery()
        val qualIcons = iconGallery.weatherActivityIcons
        inflateWeatherActivityIcons(qualIcons)
    }

    /**
     * Inflate weather activity icons
     * @param qualIcons Icons we want to show
     */
    private fun inflateWeatherActivityIcons(qualIcons: ArrayList<String>) {
        val layoutInflater = this.getSystemService(LAYOUT_INFLATER_SERVICE) as LayoutInflater
        binding.llCurIcontainer.removeAllViews()
        for (iconName in qualIcons) {
            val iconId = resources.getIdentifier(iconName, "drawable", packageName)
            val convertView = layoutInflater.inflate(R.layout.icon_gallery, null)
            val img = convertView.findViewById<View>(R.id.ivIconGalleryItem) as ImageView
            img.setImageResource(iconId)
            binding.llCurIcontainer.addView(convertView)
        }
    }

    ///////////////////////////////////////////
    //Activity ending events				 //
    ///////////////////////////////////////////
    /**
     * Display Current Weather
     * @param v View representing the current view - comes in from the layout
     */
    fun displayDashboard(v: View?) {
        val nextActivityIntent: Intent
        val toastMessage: String
        if (null != weatherData.minutely && weatherData.minutely!!.getMaxPrecip() > 0.0f) {
            nextActivityIntent = Intent(this@WeatherCurrent, MinutelyPrecipChart::class.java)
            toastMessage = "Show Minutely graphs"
        } else if (null != weatherData.hourly && weatherData.hourly!!.getMaxPrecip() > 0.0f) {
            nextActivityIntent = Intent(this@WeatherCurrent, HourlyPrecipChart::class.java)
            toastMessage = "Show Hourly graphs"
        } else if (null != weatherData.alerts) {
            nextActivityIntent = Intent(this@WeatherCurrent, WeatherAlert::class.java)
            toastMessage = "Show Alerts"
        } else {
            nextActivityIntent = Intent(this@WeatherCurrent, WeatherDashboard::class.java)
            toastMessage = "Show the Dashboard"
        }
        val animExitLeft = AnimationUtils.makeOutAnimation(this, true)
        llCurrently!!.startAnimation(animExitLeft)
        Toast.makeText(
            applicationContext, toastMessage,
            Toast.LENGTH_SHORT
        ).show()
        startActivity(nextActivityIntent)
        finish()
    }
}