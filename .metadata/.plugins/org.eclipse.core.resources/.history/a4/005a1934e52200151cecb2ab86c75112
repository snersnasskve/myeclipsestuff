package com.kve.chorerota.notification;

import com.kve.chorerota.ChoreMainActivity;
import com.kve.chorerota.R;

import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.TaskStackBuilder;
import android.content.Context;
import android.content.Intent;


import android.support.v4.app.NotificationCompat;
import android.support.v4.app.NotificationCompat.Builder;


 public class ChoreNotification {

	static int CHORE_NOTIFY_ID = 0;
	/*
	 * eg1
	 * 
	 * 
	 *  String ns = Context.NOTIFICATION_SERVICE;
NotificationManager mNotificationManager = (NotificationManager) getSystemService(ns);

int icon = R.drawable.icon4;        
CharSequence tickerText = "Hello"; // ticker-text
long when = System.currentTimeMillis();         
Context context = getApplicationContext();     
CharSequence contentTitle = "Hello";  
CharSequence contentText = "Hello";      
Intent notificationIntent = new Intent(this, Example.class);
PendingIntent contentIntent = PendingIntent.getActivity(this, 0, notificationIntent, 0);
Notification notification = new Notification(icon, tickerText, when);
notification.setLatestEventInfo(context, contentTitle, contentText, contentIntent);

// and this
private static final int HELLO_ID = 1;
mNotificationManager.notify(HELLO_ID, notification);
*
*eg2
*int icon = R.drawable.ic_launcher;
    long when = System.currentTimeMillis();
    NotificationManager nm=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);
    Intent intent=new Intent(context,MainActivity.class);
    PendingIntent  pending=PendingIntent.getActivity(context, 0, intent, 0);
    Notification notification;
        if (Build.VERSION.SDK_INT < 11) {
            notification = new Notification(icon, "Title", when);
            notification.setLatestEventInfo(
                    context,
                    "Title",
                    "Text",
                    pending);
        } else {
            notification = new Notification.Builder(context)
                    .setContentTitle("Title")
                    .setContentText(
                            "Text").setSmallIcon(R.drawable.ic_launcher)
                    .setContentIntent(pending).setWhen(when).setAutoCancel(true)
                    .build();
        }
    notification.flags |= Notification.FLAG_AUTO_CANCEL;
    notification.defaults |= Notification.DEFAULT_SOUND;
    nm.notify(0, notification);
	 */
	
	public ChoreNotification()
	{
		
	}
	
	public void getChoreNotification(String choreName, Context context)
	{
		NotificationManager notificationManager = (NotificationManager) 
				  context.getSystemService(Context.NOTIFICATION_SERVICE); 
	
	// prepare intent which is triggered if the
		// notification is selected

		Intent resetIntent = new Intent(context, ResetNotficationActivity.class);
		PendingIntent resetPending = PendingIntent.getActivity(context, 0, resetIntent, 0);

		Intent snoozeIntent = new Intent(context, SnoozeNotificationActivity.class);
		PendingIntent snoozePending = PendingIntent.getActivity(context, 0, snoozeIntent, 0);

		Intent cancelIntent = new Intent(context, CancelNotificationActivity.class);
		PendingIntent cancelPending = PendingIntent.getActivity(context, 0, cancelIntent, 0);

		Intent defaultIntent = new Intent(context, NotificationActivity.class);
		PendingIntent defaultPending = PendingIntent.getActivity(context, 0, defaultIntent, 0);

		/*
	// build notification
		// the addAction re-use the same intent to keep the example short
		Notification noti  = new Notification.Builder(context)
		        .setContentTitle("Chore Notification")
		        .setContentText("You need to " + choreName + " today")
		        .setSmallIcon(R.drawable.ic_launcher)
		        .setContentIntent(defaultPending)
		        .setAutoCancel(true)
		        .addAction(R.drawable.tick, "Done !", resetPending)
		        .addAction(R.drawable.snooze, "Snooze", snoozePending)
		        .addAction(R.drawable.cross  , "Cancel", cancelPending).build();
	*/
		
		NotificationCompat.Builder mBuilder = new NotificationCompat.Builder(context)
	    .setSmallIcon(R.drawable.snooze)
	    .setContentTitle("Chore Notification")
	    .setContentText("You need to " + choreName + " today")
	    .setContentIntent(defaultIntent);
		
		
		mBuilder.addAction(R.drawable.tick, "Done !", resetPending);
        mBuilder.addAction(R.drawable.snooze, "Snooze", snoozePending);
        mBuilder.addAction(R.drawable.cross  , "Cancel", cancelPending);

	NotificationCompat.InboxStyle inboxStyle =
	        new NotificationCompat.InboxStyle();
	String[] events = new String[6];

	// The stack builder object will contain an artificial back stack for the
	// started Activity.
	// This ensures that navigating backward from the Activity leads out of
	// your application to the Home screen.
	TaskStackBuilder stackBuilder = TaskStackBuilder.create(context);
	// Adds the back stack for the Intent (but not the Intent itself)
	stackBuilder.addParentStack(ChoreMainActivity.class);
	// Adds the Intent that starts the Activity to the top of the stack
	stackBuilder.addNextIntent(defaultIntent);


		  // hide the notification after its selected
	   // noti.flags |= Notification.FLAG_AUTO_CANCEL;

	
	    notificationManager.notify(0, mBuilder.build());	}

	/*
public void getNotification(Context context)
{
	Notification.Builder mBuilder =

        new Notification.Builder(context)
        .setSmallIcon(R.drawable.notification_icon)
        .setContentTitle("My notification")
        .setContentText("Hello World!");
// Creates an explicit intent for an Activity in your app
Intent resultIntent = new Intent(context, NotifiedActivity.class);

// The stack builder object will contain an artificial back stack for the
// started Activity.
// This ensures that navigating backward from the Activity leads out of
// your application to the Home screen.
TaskStackBuilder stackBuilder = TaskStackBuilder.create(context);
// Adds the back stack for the Intent (but not the Intent itself)
stackBuilder.addParentStack(NotifiedActivity.class);
// Adds the Intent that starts the Activity to the top of the stack
stackBuilder.addNextIntent(resultIntent);
PendingIntent resultPendingIntent =
        stackBuilder.getPendingIntent(
            0,
            PendingIntent.FLAG_UPDATE_CURRENT
        );
mBuilder.setContentIntent(resultPendingIntent);
NotificationManager mNotificationManager =
    (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);
// mId allows you to update the notification later on.
mNotificationManager.notify(mId, mBuilder.build());
}
*/
}