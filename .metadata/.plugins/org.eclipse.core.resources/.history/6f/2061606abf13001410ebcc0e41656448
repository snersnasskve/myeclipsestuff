package com.kve.xmascardlist;

import java.util.ArrayList;
import java.util.HashMap;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

public class DBTools extends SQLiteOpenHelper {

	public DBTools(Context appContext) {
		super(appContext, "xmascardlist.db", null, 1);
	// TODO Auto-generated constructor stub
	}

	@Override
	public void onCreate(SQLiteDatabase db) {
		// TODO Auto-generated method stub
		//	Err on the side of too many fields - can always auto fill
		String query = "CREATE TABLE contacts ( contact_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, phone_number TEXT, email_address TEXT, home_address TEXT, area_code TEXT, country TEXT, xmas_rec TEXT, xmas_sent INTEGER, xmas_email INTEGER, last_sent TEXT )" ;
		db.execSQL(query);
	}
	
	@Override
	public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
		// TODO Auto-generated method stub
		String query = "DROP TABLE IF EXISTS contacts";
		db.execSQL(query);
		onCreate(db);
	}
	
	public ArrayList<HashMap<String, Object>> getContacts()
	{
		ArrayList<HashMap<String, Object>> contactArray = new ArrayList<HashMap<String, Object>>();
		
		SQLiteDatabase db = this.getReadableDatabase();
		String selectQuery = "SELECT * FROM contacts ORDER BY first_name";
		Cursor cursor = db.rawQuery(selectQuery, null);
		
		if (cursor.moveToFirst()){
			do {
				HashMap<String, Object> contactMap = new HashMap<String, Object>();
				contactMap.put("contactId",	cursor.getLong(0));
				contactMap.put("firstName",	cursor.getString(1));
				contactMap.put("lastName", 	cursor.getString(2));
				contactMap.put("phone", 	cursor.getString(3));
				contactMap.put("email", 	cursor.getString(4));
				contactMap.put("address", 	cursor.getString(5));
				contactMap.put("areaCode", 	cursor.getString(6));
				contactMap.put("country", 	cursor.getString(7));
				contactMap.put("xmasRec", 	cursor.getString(8));
				contactMap.put("xmasSent", 	cursor.getInt(9));
				contactMap.put("xmasEmail",	cursor.getInt(10));
				contactMap.put("lastSent",	cursor.getString(10));
				contactArray.add(contactMap);
			} while (cursor.moveToNext());
		}
		return contactArray;
	}
	
	public void insertContact(HashMap<String, Object> contactValues)
	{
		SQLiteDatabase db = this.getWritableDatabase();
		ContentValues values = new ContentValues();
		values.put("first_name", 	(String) contactValues.get("firstName"));
		values.put("last_name", 	(String) contactValues.get("lastName"));
		values.put("phone_number", 	(String) contactValues.get("phone"));
		values.put("email_address",	(String) contactValues.get("email"));
		values.put("home_address", 	(String) contactValues.get("address"));
		values.put("area_code", 	(String) contactValues.get("areaCode"));
		values.put("country", 		(String) contactValues.get("country"));
		values.put("xmas_rec", 		(String) contactValues.get("xmasRec"));
		values.put("xmas_sent", 	(Integer)contactValues.get("xmasSent"));
		values.put("xmas_email", 	(Integer)contactValues.get("xmasEmail"));
		values.put("last_sent", 	(String) contactValues.get("lastSent"));
		db.insert("contacts", null, values);
		db.close();
	}
	
	public int updateContact(HashMap<String, Object> contactValues)
	{
		SQLiteDatabase db = this.getWritableDatabase();
		ContentValues values = new ContentValues();
		values.put("first_name", 	(String) contactValues.get("firstName"));
		values.put("last_name", 	(String) contactValues.get("lastName"));
		values.put("phone_number", 	(String) contactValues.get("phone"));
		values.put("email_address",	(String) contactValues.get("email"));
		values.put("home_address", 	(String) contactValues.get("address"));
		values.put("area_code", 	(String) contactValues.get("areaCode"));
		values.put("country", 		(String) contactValues.get("country"));
		values.put("xmas_rec", 		(String)contactValues.get("xmasRec"));
		values.put("xmas_sent", 	(Integer)contactValues.get("xmasSent"));
		values.put("xmas_email", 	(Integer)contactValues.get("xmasEmail"));
		values.put("last_sent", 	(String) contactValues.get("lastSent"));
		return db.update("contacts", values, 
				"contact_id = ?", new String[] {(String)contactValues.get("contactId")});
		
	}

	public void deleteContact(String id)
	{
		SQLiteDatabase db = this.getWritableDatabase();
		String deleteQuery = "DELETE FROM contacts WHERE contact_id = '" + id + "'";
		db.execSQL(deleteQuery);			
	}

	
	public HashMap<String, Object> getContact(String id)
	{
		HashMap<String, Object> contactMap = new HashMap<String, Object>();
			
		SQLiteDatabase db = this.getReadableDatabase();
		String selectQuery = "SELECT * FROM contacts WHERE contact_id = '" + id + "'";
		Cursor cursor = db.rawQuery(selectQuery, null);
		
		if (cursor.moveToFirst()){
			contactMap.put("contactId", cursor.getString(0));
			contactMap.put("firstName", cursor.getString(1));
			contactMap.put("lastName", 	cursor.getString(2));
			contactMap.put("phone", 	cursor.getString(3));
			contactMap.put("email", 	cursor.getString(4));
			contactMap.put("address", 	cursor.getString(5));
			contactMap.put("areaCode", 	cursor.getString(6));
			contactMap.put("country", 	cursor.getString(7));
			contactMap.put("xmasRec", 	cursor.getString(8));
			contactMap.put("xmasSent", 	cursor.getInt(9));
			contactMap.put("xmasEmail",	cursor.getInt(10));
			contactMap.put("lastSent",	cursor.getString(10));
		}
		return contactMap;
	}

	
}
